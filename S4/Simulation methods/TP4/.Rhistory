oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.7
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
SA <- function(sol)
{
i =1
solution <- sol
while(i<400)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.7
while(j<1000)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.7
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin_263.6")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin_263.6")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
SA <- function(sol)
{
i =1
solution <- sol
while(i<400)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.7
while(j<500)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.7
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin_263.6")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
SA <- function(sol)
{
i =1
solution <- sol
while(i<500)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.7
while(j<500)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.7
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
SA <- function(sol)
{
i =1
solution <- sol
while(i<500)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.8
while(j<500)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.8
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin_263.6")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
SA <- function(sol)
{
i =1
solution <- sol
while(i<500)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.3
while(j<500)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.3
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin_263.6")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin=247.091")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],cex=0.5,col="blue",pos=1)
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin=247.091")
lines(cor[sol,1],cor[sol,2],col="red")
text(sol,cex=0.5,col="blue",pos=1)
sol
plot(cor[sol,1],cor[sol,2],main = "Longeur_Chemin=247.091")
lines(cor[sol,1],cor[sol,2],col="red")
text(cor[sol,1],cor[sol,2],labels= sol,cex=0.5,col="blue",pos=1)
s1 <- {11 2 50 19  5 36 46 31  1  6 29 22 12  3 47 35 48 18 16 30 45 25 15 39 38 41 23 27 20 37 42 32 17 34 14 26 43  7 13 49 24 21  4  8 40 10 28 44 33  9}
s1 <- [1,2]
s1 = c(1,2)
sM<- read.csv("res.cvs")
sM<- read.csv("res.cvs")
sM<- read.csv("res.csv")
sM<- read.csv("res.csv")
ls
setwd("~/Desktop/S4/Simulation methods/TP4")
sM<- read.csv("res.csv")
sM
sM <- sM[,3]
sM <- sM[,2]
sM
dist(sM)
cor(21,1)
cor
cor(21,)
cor[21,1]
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
print(d)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
dist(sM)
set.seed(561)
cor <- read.csv("Coordonnees-Villes.csv",header = TRUE)
cor <- cbind(cor[,2],cor[,3])
numberVille <- dim(cor)[1]
#solution initiale
#s <- sample(numberVille)
s <- seq(1,50,1)
#The function to calculate the distance of one feasible solution
dist <- function(sol=s)
{
distance = 0
for(i in 1:(numberVille-1))
{
d <- sqrt((cor[sol[i],1]-cor[sol[i+1],1])^2+(cor[sol[i],2]-cor[sol[i+1],2])^2)
distance<- distance + d
}
distance<- distance+sqrt((cor[sol[1],1]-cor[sol[numberVille],1])^2+(cor[sol[1],2]-cor[sol[numberVille],2])^2)
return (distance)
}
#Generate a neibor
neibor<-function(sol)
{
n <- length(sol)
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
while(x1==x2)
{
x1 <- round(runif(1)*(n-1)+1)
x2 <- round(runif(1)*(n-1)+1)
}
temp <- sol[x1]
sol[x1] <- sol[x2]
sol[x2] <- temp
return (sol)
}
#Applied the Simulated Annealing algothme
SA <- function(sol)
{
i =1
solution <- sol
while(i<500)
{
mauvais=0
j = 1
b <- log(i*j+1)/8.3
while(j<500)
{
u <- runif(1)
oldSol <- sol
oldDistance <- dist(oldSol)
newSol <- neibor(oldSol)
newDistance <- dist(newSol)
if(u < exp(-b*(newDistance-oldDistance)))
{
sol <- newSol
mauvais=0
}else{
mauvais=mauvais+1
sol <- oldSol
}
j = j+1
b <-log(i*j+1)/8.3
if(mauvais>200)
break;
}
if(dist(sol)<dist(solution))
solution <- sol
i=i+1
}
return(solution)
}
sol = SA(s)
sol
dist(sol)
