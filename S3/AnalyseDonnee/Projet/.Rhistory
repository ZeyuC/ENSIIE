muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak))<= epsi){break}
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(MASS)
v1 <- mvrnorm(500, mu = c(1,2), Sigma = diag(2))
v2 <- mvrnorm(500, mu = c(1,2), Sigma = 4 * diag(2))
v <- rbind(v1,v2)
dim(v)
plot(v[,1])
plot(v[,2])
plot(v)
sep = matrix(0,1000,1)
sep[1:500] = 1
library(ggplot2)
v.data = as.data.frame(v)
ggplot(v.data, aes(x = V1, y=V2, colour = sep)) + geom_point() + ggtitle("contour plot") + labs(colour = "généré pas la 1ere gaussienne") + geom_density2d(col = "black")
library(mclust)
clust <- Mclust(v, modelNames = "VVI")
clust$parameters
clust$classification
km <- kmeans(v, centers = 2)
Mean <- km$centers
Std <- sqrt(km$withinss/km$size)
data.frame(Mean,Std)
km$withinss
km$cluster
km$centers
compare = ifelse(clust$classification == km$cluster, 1, 0)
sum(compare)
s = 0
for (i in 1:500){
s = s + ifelse(clust$classification[i] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(clust$classification[i] != 1, 1, 0)
}
s
s = 0
for (i in 1:500){
s = s + ifelse(km$cluster[i] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(km$cluster[i] != 1, 1, 0)
}
s
ggplot(v.data, aes(x = V1, y=V2, colour = clust$classification)) + geom_point() + ggtitle("contour plot Mclust") + labs(colour = "généré pas la 1ere gaussienne")
ggplot(v.data, aes(x = V1, y=V2, colour = km$cluster)) + geom_point() + ggtitle("contour plot Kmean") + labs(colour = "généré pas la 1ere gaussienne")
fk <- function(X,muk,sigmak,i,k){
d = ncol(X)
res = (1/(((2*pi)^(d/2))*sqrt(abs(det(sigmak[(1+d*(k-1)):(d*(k)),]))))) * exp(-(1/2)*t(X[i,]- muk[k,]) %*% solve(sigmak[(1+d*(k-1)):(d*(k)),],tol = 1.e-40) %*% (X[i,]- muk[k,]) )
return(res)
}
myEstep <- function(X,muk,sigmak,pik){
tik = matrix(nrow = nrow(X), ncol = nrow(pik))
for ( i in 1:nrow(X)){
sum <- 0
for (k in 1:nrow(pik)){
sum <- sum + pik[k]*fk(X,muk,sigmak,i,k)
}
for (k in 1:nrow(pik)){
tik[i,k] = (pik[k]*fk(X,muk,sigmak,i,k))/sum
}
}
return(tik)
}
#test
pitest = matrix(data = 0.5, nrow = 2, ncol = 1)
mutest = matrix(nrow = 2, ncol = 2)
mutest[1,] = c(1,2)
mutest[2,] = c(1,2)
sigmatest = diag(2)
sigmatest = rbind(sigmatest, 4 * diag(2))
tiktest = myEstep(v,mutest,sigmatest,pitest)
for(i in 1:1000){
if (tiktest[i,1] >= 0.5){
tiktest[i,1] = 1
tiktest[i,2] = 0
}
else{
tiktest[i,1] = 0
tiktest[i,2] = 1
}
}
s = 0
for (i in 1:500){
s = s + ifelse(tiktest[i,1] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(tiktest[i,2] == 1, 1, 0)
}
s
myMstep <- function(X,tik){
maxk = ncol(tik)
maxn = nrow(X)
maxd = ncol(X)
pik <- matrix(nrow = maxk, ncol = 1)
muk <- matrix(nrow = maxk, ncol = maxd)
sigmak <- matrix(nrow = maxk*maxd, ncol = maxd)
for (k in 1:maxk){
pik[k] <- (1/maxn) * sum (tik[,k])
}
for (k in 1:maxk){
num <- matrix(data = 0, nrow = 1, ncol = maxd)
for (i in 1:maxn){
num <- num + tik[i,k] * X[i,]
}
muk[k,] <- num / sum (tik[,k])
}
for (k in 1:maxk){
num <- matrix(data = 0, nrow = maxd, ncol = maxd)
for (i in 1:maxn){
num <- num + tik[i,k] * ( (X[i,]-muk[k,]) %*% t(X[i,]-muk[k,]) )
}
sigmak[(1+maxd*(k-1)):(maxd*(k)),] <- num /sum (tik[,k])
}
res <- list("pi" = pik, "mu" = muk, "sigma" = sigmak)
return(res)
}
logP <- function(X,pik,muk,sigmak){
res = 0
for (i in 1:nrow(X)){
sum = 0
for(k in 1:nrow(pik)){
sum = sum + pik[k] * fk(X,muk,sigmak,i,k)
}
res = res + log(sum)
}
return(res)
}
myEMalgo <- function(X,k,epsi){
pik <- matrix(data = 1/k,nrow = k, ncol = 1)
muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak)) <= epsi)
{break}
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
logP <- function(X,pik,muk,sigmak){
res = 0
for (i in 1:nrow(X)){
sum = 0
for(k in 1:nrow(pik)){
sum = sum + pik[k] * fk(X,muk,sigmak,i,k)
}
res = res + log(sum)
}
return(res)
}
myEMalgo <- function(X,k,epsi){
pik <- matrix(data = 1/k,nrow = k, ncol = 1)
muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
#if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak)) <= epsi)
#{break}
if(count >1000)
break
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
logP <- function(X,pik,muk,sigmak){
res = 0
for (i in 1:nrow(X)){
sum = 0
for(k in 1:nrow(pik)){
sum = sum + pik[k] * fk(X,muk,sigmak,i,k)
}
res = res + log(sum)
}
return(res)
}
myEMalgo <- function(X,k,epsi){
pik <- matrix(data = 1/k,nrow = k, ncol = 1)
muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
#if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak)) <= epsi)
#{break}
if(count >100)
break
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
logP <- function(X,pik,muk,sigmak){
res = 0
for (i in 1:nrow(X)){
sum = 0
for(k in 1:nrow(pik)){
sum = sum + pik[k] * fk(X,muk,sigmak,i,k)
}
res = res + log(sum)
}
return(res)
}
myEMalgo <- function(X,k,epsi){
pik <- matrix(data = 1/k,nrow = k, ncol = 1)
muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
#if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak)) <= epsi)
#{break}
if(count >10)
break
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
theta$pi
theta$mu
theta$sigma
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(MASS)
v1 <- mvrnorm(500, mu = c(1,2), Sigma = diag(2))
v2 <- mvrnorm(500, mu = c(1,2), Sigma = 4 * diag(2))
v <- rbind(v1,v2)
dim(v)
plot(v[,1])
plot(v[,2])
plot(v)
sep = matrix(0,1000,1)
sep[1:500] = 1
library(ggplot2)
v.data = as.data.frame(v)
ggplot(v.data, aes(x = V1, y=V2, colour = sep)) + geom_point() + ggtitle("contour plot") + labs(colour = "généré pas la 1ere gaussienne") + geom_density2d(col = "black")
library(mclust)
clust <- Mclust(v, modelNames = "VVI")
clust$parameters
clust$classification
km <- kmeans(v, centers = 2)
Mean <- km$centers
Std <- sqrt(km$withinss/km$size)
data.frame(Mean,Std)
km$withinss
km$cluster
km$centers
compare = ifelse(clust$classification == km$cluster, 1, 0)
sum(compare)
s = 0
for (i in 1:500){
s = s + ifelse(clust$classification[i] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(clust$classification[i] != 1, 1, 0)
}
s
s = 0
for (i in 1:500){
s = s + ifelse(km$cluster[i] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(km$cluster[i] != 1, 1, 0)
}
s
ggplot(v.data, aes(x = V1, y=V2, colour = clust$classification)) + geom_point() + ggtitle("contour plot Mclust") + labs(colour = "généré pas la 1ere gaussienne")
ggplot(v.data, aes(x = V1, y=V2, colour = km$cluster)) + geom_point() + ggtitle("contour plot Kmean") + labs(colour = "généré pas la 1ere gaussienne")
fk <- function(X,muk,sigmak,i,k){
d = ncol(X)
res = (1/(((2*pi)^(d/2))*sqrt(abs(det(sigmak[(1+d*(k-1)):(d*(k)),]))))) * exp(-(1/2)*t(X[i,]- muk[k,]) %*% solve(sigmak[(1+d*(k-1)):(d*(k)),],tol = 1.e-40) %*% (X[i,]- muk[k,]) )
return(res)
}
myEstep <- function(X,muk,sigmak,pik){
tik = matrix(nrow = nrow(X), ncol = nrow(pik))
for ( i in 1:nrow(X)){
sum <- 0
for (k in 1:nrow(pik)){
sum <- sum + pik[k]*fk(X,muk,sigmak,i,k)
}
for (k in 1:nrow(pik)){
tik[i,k] = (pik[k]*fk(X,muk,sigmak,i,k))/sum
}
}
return(tik)
}
#test
pitest = matrix(data = 0.5, nrow = 2, ncol = 1)
mutest = matrix(nrow = 2, ncol = 2)
mutest[1,] = c(1,2)
mutest[2,] = c(1,2)
sigmatest = diag(2)
sigmatest = rbind(sigmatest, 4 * diag(2))
tiktest = myEstep(v,mutest,sigmatest,pitest)
for(i in 1:1000){
if (tiktest[i,1] >= 0.5){
tiktest[i,1] = 1
tiktest[i,2] = 0
}
else{
tiktest[i,1] = 0
tiktest[i,2] = 1
}
}
s = 0
for (i in 1:500){
s = s + ifelse(tiktest[i,1] == 1, 1, 0)
}
for (i in 501:1000){
s = s + ifelse(tiktest[i,2] == 1, 1, 0)
}
s
myMstep <- function(X,tik){
maxk = ncol(tik)
maxn = nrow(X)
maxd = ncol(X)
pik <- matrix(nrow = maxk, ncol = 1)
muk <- matrix(nrow = maxk, ncol = maxd)
sigmak <- matrix(nrow = maxk*maxd, ncol = maxd)
for (k in 1:maxk){
pik[k] <- (1/maxn) * sum (tik[,k])
}
for (k in 1:maxk){
num <- matrix(data = 0, nrow = 1, ncol = maxd)
for (i in 1:maxn){
num <- num + tik[i,k] * X[i,]
}
muk[k,] <- num / sum (tik[,k])
}
for (k in 1:maxk){
num <- matrix(data = 0, nrow = maxd, ncol = maxd)
for (i in 1:maxn){
num <- num + tik[i,k] * ( (X[i,]-muk[k,]) %*% t(X[i,]-muk[k,]) )
}
sigmak[(1+maxd*(k-1)):(maxd*(k)),] <- num /sum (tik[,k])
}
res <- list("pi" = pik, "mu" = muk, "sigma" = sigmak)
return(res)
}
logP <- function(X,pik,muk,sigmak){
res = 0
for (i in 1:nrow(X)){
sum = 0
for(k in 1:nrow(pik)){
sum = sum + pik[k] * fk(X,muk,sigmak,i,k)
}
res = res + log(sum)
}
return(res)
}
myEMalgo <- function(X,k,epsi){
pik <- matrix(data = 1/k,nrow = k, ncol = 1)
muk <- matrix(data = 0, nrow = k, ncol = ncol(X))
sigmak <- diag(ncol(X))
for (l in 2:k){
sigmak <- rbind(sigmak,l*diag(ncol(X)))
}
count = 0
repeat{
count = count + 1
tik <- myEstep(X,muk,sigmak,pik)
theta <- myMstep(X,tik)
newpi <- theta$pi
newmu <- theta$mu
newsigma <- theta$sigma
#if((logP(X,newpi,newmu,newsigma) - logP(X,pik,muk,sigmak)) <= epsi)
#{break}
if(count >10)
break
muk <- newmu
sigmak <- newsigma
pik <- newpi
}
print(count)
res = list("pi" = newpi, "mu" = newmu, "sigma" = newsigma, "t" = tik)
return(res)
}
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta = myEMalgo(data,3,0.01)
theta$pi
theta$mu
theta$sigma
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta$pi
theta$mu
theta$sigma
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
theta$pi
theta$mu
theta$sigma
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
data("iris")
head(iris)
data = iris[,1:4]
head(data)
data = as.matrix(data)
