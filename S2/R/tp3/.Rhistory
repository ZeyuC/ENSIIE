for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y),hjust = 10,vjust=10)
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(0,10,10/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
L_a
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(0,10,10/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
L_a
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(0,10,10/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
y
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
y
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
y
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(10))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
y[i]=y[i]*1000;
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(10))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
y[i]=y[i]*exp(-10)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(10))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
y[i]=y[i]*exp(-30)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(10))
# log_vraissemblance pour une lois cauchy
# x_n est un échantillon
Log_vrs_cau <- function (param,x_n)
{
x0 = param[1]
alpha = param[2]
N <- length(x_n)
L <- -N*log(pi)+N*log(alpha)-sum(log((x_n-x0)**2+alpha**2))
return(L)
}
n <- 10
x0_a <- rep(seq(-4,0,4/(n - 1)), times=n)
alpha_a   <- rep(seq(0,1,1/(n - 1)), each=n)
z <- seq(0,length=100)
for(i in 1:100)
{
z[i] = Log_vrs_cau(c(x0_a[i],alpha_a[i]),r_cau)
}
df <- data.frame(x0_a, alpha_a, z)
ggplot(df,aes(x0_a,alpha_a))+geom_raster(aes(fill = z))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
-y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(10))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)*exp(-49)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)/exp(49)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)/exp(1000)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)/exp(48)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)/exp(100)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
library(ggplot2)
lambda <- 2
L <- 4
N = 100
r_exp <- rexp(n=N,lambda)*(exp(lambda*L))
x0 = -2
alpha = 0.4
r_cau <- rcauchy(n=N,x0,alpha)
# log_vraissemblance pour une lois exponentielle
# x_n est un échantillon
Log_vrs_exp <- function(param,x_n)
{
lambda = param[1]
L = param[2]
N <- length(x_n)
-sum(dexp(x_n,lambda,log=TRUE)*exp(lambda*L))
#return(sum(log(lambda) - lambda * (x_n-L)))
}
n <- 40
# generation du dataframe
lambda_a <- rep(seq(1,10,9/(n - 1)), each=n)
length(lambda_a)
L_a   <- rep(seq(-10,10,20/(n - 1)), times=n)
y <- seq(0,length=1600)
for(i in 1:1600)
{
y[i] = Log_vrs_exp(c(lambda_a[i],L_a[i]),r_exp)/exp(55)
}
df <- data.frame(lambda_a, L_a, y)
ggplot(df,aes(lambda_a,L_a))+geom_raster(aes(fill = y))+scale_fill_gradientn(colours = topo.colors(4))
