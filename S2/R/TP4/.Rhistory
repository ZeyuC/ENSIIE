s <- rnorm(n,mu,sd)
for(j in 1 :20)
{
sample[i,j]<-s[j]
}
}
return(sample)
}
array <-1:100
S_100 <- array(1:2000,dim=c(100,20))
S_100 <- sim.fun(100,20,1,sqrt(2))
#appelle 100 fois decision en passant alpha
fun_decison <- function(S_100,alpha)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,alpha,1,1.5)
if (array_decison[i]==1)
count=count+1
}
cat("le nombre de 1 avec alpha",alpha,"est",count,"\n")
return(array_decison)
}
array_decison <- fun_decison(S_100,0.05)
array_decison
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
S1_100 <- array(1:2000,dim=c(100,20))
S1_100 <- sim.fun(100,20,1.5,sqrt(2))
fun_decison(S1_100,0.05)
#appelle 100 fois decision en passant mu1
fun_decison_mu1 <- function(S_100,mu1)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,0.05,1,mu1)
if (array_decison[i]==mu1)
count=count+1
}
return (count/100)
}
S1_100 <- array(1:2000,dim=c(100,20))
v <- 1:9
mu1 <- 1.2
for(i in 1:9)
{
S1_100 <- sim.fun(100,20,mu1,sqrt(2))
v[i] <- fun_decison_mu1(S1_100,mu1)
mu1<- mu1+0.1
}
x = seq(1.2,2.0,0.1)
plot(x,v,xlab="mu1",ylab="bonne decision")
r= rnorm(20,1,sqrt(20))
t.test(r,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
t.test(array_decison_0.05,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.01)
t.test(array_decison_0.05,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
t.test(array_decison_0.05,mu=1)
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
t.test(array_decison_0.01,mu=1)
Sn <- rnorm(20,mean=1,sd = sqrt(2))
# Sn est un échantillon, a est erreur de première espèce
# la valeur retourné soit mu0 soit mu1
decision<- function(Sn,a,mu0,mu1)
{
n <- length(Sn)
mu_emprique <- sum(Sn)/n
sn2 <- 0
for(i in 1:20)
{
sn2 <- sn2 + ((Sn[i]-mu_emprique)^2)
}
sn2 <- sn2 /(n-1)
borne <- mu0 + (sqrt(sn2)*qt(1-a,n-1)/sqrt(n))
if(mu_emprique > borne)
return(mu1)
else
return(mu0)
}
decision(Sn,0.05,1,1.5)
# Simuler N = 100 fois échantillons
# N est la fois d'échantillons
# f est la fonction qu'on va simuler
# n taille d'échantillon,sd est sigma
# Dans R, pour manipuler le array, faut ecrire s[i,j] au lieu de s[i][j]
sim.fun <-function (N,n,mu,sd)
{
sample <- array(1:2000,dim=c(100,20))
for (i in 1:N) {
s <- rnorm(n,mu,sd)
for(j in 1 :20)
{
sample[i,j]<-s[j]
}
}
return(sample)
}
array <-1:100
S_100 <- array(1:2000,dim=c(100,20))
S_100 <- sim.fun(100,20,1,sqrt(2))
#appelle 100 fois decision en passant alpha
fun_decison <- function(S_100,alpha)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,alpha,1,1.5)
if (array_decison[i]==1)
count=count+1
}
cat("le nombre de 1 avec alpha",alpha,"est",count,"\n")
return(array_decison)
}
array_decison <- fun_decison(S_100,0.05)
array_decison
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
S1_100 <- array(1:2000,dim=c(100,20))
S1_100 <- sim.fun(100,20,1.5,sqrt(2))
fun_decison(S1_100,0.05)
#appelle 100 fois decision en passant mu1
fun_decison_mu1 <- function(S_100,mu1)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,0.05,1,mu1)
if (array_decison[i]==mu1)
count=count+1
}
return (count/100)
}
S1_100 <- array(1:2000,dim=c(100,20))
v <- 1:9
mu1 <- 1.2
for(i in 1:9)
{
S1_100 <- sim.fun(100,20,mu1,sqrt(2))
v[i] <- fun_decison_mu1(S1_100,mu1)
mu1<- mu1+0.1
}
x = seq(1.2,2.0,0.1)
plot(x,v,xlab="mu1",ylab="bonne decision")
r= rnorm(20,1,sqrt(20))
t.test(r,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
t.test(array_decison_0.05,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.01)
t.test(array_decison_0.05,mu=1)
Sn <- rnorm(20,mean=1,sd = sqrt(2))
# Sn est un échantillon, a est erreur de première espèce
# la valeur retourné soit mu0 soit mu1
decision<- function(Sn,a,mu0,mu1)
{
n <- length(Sn)
mu_emprique <- sum(Sn)/n
sn2 <- 0
for(i in 1:20)
{
sn2 <- sn2 + ((Sn[i]-mu_emprique)^2)
}
sn2 <- sn2 /(n-1)
borne <- mu0 + (sqrt(sn2)*qt(1-a,n-1)/sqrt(n))
if(mu_emprique > borne)
return(mu1)
else
return(mu0)
}
decision(Sn,0.05,1,1.5)
# Simuler N = 100 fois échantillons
# N est la fois d'échantillons
# f est la fonction qu'on va simuler
# n taille d'échantillon,sd est sigma
# Dans R, pour manipuler le array, faut ecrire s[i,j] au lieu de s[i][j]
sim.fun <-function (N,n,mu,sd)
{
sample <- array(1:2000,dim=c(100,20))
for (i in 1:N) {
s <- rnorm(n,mu,sd)
for(j in 1 :20)
{
sample[i,j]<-s[j]
}
}
return(sample)
}
array <-1:100
S_100 <- array(1:2000,dim=c(100,20))
S_100 <- sim.fun(100,20,1,sqrt(2))
#appelle 100 fois decision en passant alpha
fun_decison <- function(S_100,alpha)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,alpha,1,1.5)
if (array_decison[i]==1)
count=count+1
}
if(count = 100)
Sn <- rnorm(20,mean=1,sd = sqrt(2))
# Sn est un échantillon, a est erreur de première espèce
# la valeur retourné soit mu0 soit mu1
decision<- function(Sn,a,mu0,mu1)
{
n <- length(Sn)
mu_emprique <- sum(Sn)/n
sn2 <- 0
for(i in 1:20)
{
sn2 <- sn2 + ((Sn[i]-mu_emprique)^2)
}
sn2 <- sn2 /(n-1)
borne <- mu0 + (sqrt(sn2)*qt(1-a,n-1)/sqrt(n))
if(mu_emprique > borne)
return(mu1)
else
return(mu0)
}
decision(Sn,0.05,1,1.5)
# Simuler N = 100 fois échantillons
# N est la fois d'échantillons
# f est la fonction qu'on va simuler
# n taille d'échantillon,sd est sigma
# Dans R, pour manipuler le array, faut ecrire s[i,j] au lieu de s[i][j]
sim.fun <-function (N,n,mu,sd)
{
sample <- array(1:2000,dim=c(100,20))
for (i in 1:N) {
s <- rnorm(n,mu,sd)
for(j in 1 :20)
{
sample[i,j]<-s[j]
}
}
return(sample)
}
array <-1:100
S_100 <- array(1:2000,dim=c(100,20))
S_100 <- sim.fun(100,20,1,sqrt(2))
#appelle 100 fois decision en passant alpha
fun_decison <- function(S_100,alpha)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,alpha,1,1.5)
if (array_decison[i]==1)
count=count+1
}
if(count == 100)
array_decison[100]=array_decison[100]+0.01;
cat("le nombre de 1 avec alpha",alpha,"est",count,"\n")
return(array_decison)
}
array_decison <- fun_decison(S_100,0.05)
array_decison
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
S1_100 <- array(1:2000,dim=c(100,20))
S1_100 <- sim.fun(100,20,1.5,sqrt(2))
fun_decison(S1_100,0.05)
#appelle 100 fois decision en passant mu1
fun_decison_mu1 <- function(S_100,mu1)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,0.05,1,mu1)
if (array_decison[i]==mu1)
count=count+1
}
return (count/100)
}
S1_100 <- array(1:2000,dim=c(100,20))
v <- 1:9
mu1 <- 1.2
for(i in 1:9)
{
S1_100 <- sim.fun(100,20,mu1,sqrt(2))
v[i] <- fun_decison_mu1(S1_100,mu1)
mu1<- mu1+0.1
}
x = seq(1.2,2.0,0.1)
plot(x,v,xlab="mu1",ylab="bonne decision")
r= rnorm(20,1,sqrt(20))
t.test(r,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
t.test(array_decison_0.05,mu=1)
array_decison_0.01 <- fun_decison(S_100,0.01)
t.test(array_decison_0.01,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
t.test(array_decison_0.05,mu=1)
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
t.test(array_decison_0.01,mu=1)
Sn <- rnorm(20,mean=1,sd = sqrt(2))
# Sn est un échantillon, a est erreur de première espèce
# la valeur retourné soit mu0 soit mu1
decision<- function(Sn,a,mu0,mu1)
{
n <- length(Sn)
mu_emprique <- sum(Sn)/n
sn2 <- 0
for(i in 1:20)
{
sn2 <- sn2 + ((Sn[i]-mu_emprique)^2)
}
sn2 <- sn2 /(n-1)
borne <- mu0 + (sqrt(sn2)*qt(1-a,n-1)/sqrt(n))
if(mu_emprique > borne)
return(mu1)
else
return(mu0)
}
decision(Sn,0.05,1,1.5)
# Simuler N = 100 fois échantillons
# N est la fois d'échantillons
# f est la fonction qu'on va simuler
# n taille d'échantillon,sd est sigma
# Dans R, pour manipuler le array, faut ecrire s[i,j] au lieu de s[i][j]
sim.fun <-function (N,n,mu,sd)
{
sample <- array(1:2000,dim=c(100,20))
for (i in 1:N) {
s <- rnorm(n,mu,sd)
for(j in 1 :20)
{
sample[i,j]<-s[j]
}
}
return(sample)
}
array <-1:100
S_100 <- array(1:2000,dim=c(100,20))
S_100 <- sim.fun(100,20,1,sqrt(2))
#appelle 100 fois decision en passant alpha
fun_decison <- function(S_100,alpha)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,alpha,1,1.5)
if (array_decison[i]==1)
count=count+1
}
if(count == 100)
array_decison[100]=array_decison[100]+0.01;
cat("le nombre de 1 avec alpha",alpha,"est",count,"\n")
return(array_decison)
}
array_decison <- fun_decison(S_100,0.05)
array_decison
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
S1_100 <- array(1:2000,dim=c(100,20))
S1_100 <- sim.fun(100,20,1.5,sqrt(2))
fun_decison(S1_100,0.05)
#appelle 100 fois decision en passant mu1
fun_decison_mu1 <- function(S_100,mu1)
{
array_decison <-1:100
count <- 0
for ( i in 1:100)
{
Sn <- 1:20
for(j in 1 :20)
{
Sn[j]<-S_100[i,j]
}
array_decison[i] <- decision(Sn,0.05,1,mu1)
if (array_decison[i]==mu1)
count=count+1
}
return (count/100)
}
S1_100 <- array(1:2000,dim=c(100,20))
v <- 1:9
mu1 <- 1.2
for(i in 1:9)
{
S1_100 <- sim.fun(100,20,mu1,sqrt(2))
v[i] <- fun_decison_mu1(S1_100,mu1)
mu1<- mu1+0.1
}
x = seq(1.2,2.0,0.1)
plot(x,v,xlab="mu1",ylab="bonne decision")
r= rnorm(20,1,sqrt(20))
t.test(r,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
t.test(array_decison_0.05,mu=1)
array_decison_0.01 <- fun_decison(S_100,0.01)
t.test(array_decison_0.01,mu=1)
array_decison_0.2 <- fun_decison(S_100,0.2)
array_decison_0.2
t.test(array_decison_0.2,mu=1)
array_decison_0.1 <- fun_decison(S_100,0.1)
array_decison_0.1
t.test(array_decison_0.1,mu=1)
array_decison_0.05 <- fun_decison(S_100,0.05)
array_decison_0.05
t.test(array_decison_0.05,mu=1)
array_decison_0.01 <- fun_decison(S_100,0.01)
array_decison_0.01
t.test(array_decison_0.01,mu=1)
